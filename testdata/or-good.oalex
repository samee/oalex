# This no-look `asgn` rule is different from the `_ -> asgn` I was planning.
# This version can fall back to a different rule. The hypothetical blank-match
# version cannot, since that match always succeeds.
rule simple_stmt choices:
| "var" -> decl
| int_value -> error 'Statement cannot start with a number'
| asgn
| error 'Invalid statement'

# TODO Allow the use of literal strings in optional brackets, like
# "[ this ]", where 'this' is not a template part.
rule decl:
  var ident [ = int_value ]
outputs: {
  stmt: "decl",
  varname: ident,
  init_value: int_value,
}

rule ident_regex: /[_a-zA-Z]+/
rule int_value: /-?[0-9]+/

# TODO non-word inline lookaheads
rule ident choices:
| "var" -> error 'Reserved keyword "var" cannot be a variable name'
| ident_regex

rule asgn:
  ident = int_value
outputs: {
  stmt: "asgn",
  lhs: ident,
  rhs: int_value,
}

example simple_stmt:
  var x = 5
outputs: {
  stmt: "decl",
  varname: "x",
  init_value: "5",
}

# No initial value
example simple_stmt:
  var x
outputs: {
  stmt: "decl",
  varname: "x",
}

example simple_stmt:
  x = 5
outputs: {
  stmt: "asgn",
  lhs: "x",
  rhs: "5",
}

example simple_stmt:
  varx = 5
outputs: {
  stmt: "asgn",
  lhs: "varx",
  rhs: "5",
}

example simple_stmt:
  4: varx = 5;
outputs error with 'Statement cannot start with a number'

example simple_stmt:
  (lisp s-expression)
outputs error with 'Invalid statement'

example decl:
  var var = 5
outputs error with 'Reserved keyword "var" cannot be a variable name'

# TODO success test with end-position marker, like codegen ignored tests.

rule simple_stmt_flipped choices:
| asgn_quiet
| "var" -> decl

rule asgn_quiet choices:
| "var" -> quiet error
| asgn

example simple_stmt_flipped:
  var x = 5
outputs: { stmt: "decl", varname: "x", init_value: "5" }

example simple_stmt_flipped:
  x = 5
outputs: { stmt: "asgn", lhs: "x", rhs: "5" }

# TODO ellipsis shouldn't have to be surrounded by spaces.
rule compound_stmt:
  simple_stmt; ... ; simple_stmt;
outputs: { stmt: [simple_stmt, ...] }

example compound_stmt:
  x = 3;
  var y = 9;
outputs: {
  stmt: [
    { stmt: "asgn", lhs: "x", rhs: "3" },
    { stmt: "decl", varname: "y", init_value: "9" },
  ]
}

rule simple_stmt_inline choices:
| "var"     -> "var varname [ = init_value ]"
| int_value -> error 'Statement cannot start with a number'
| "lhs = rhs"
| error 'Invalid statement'
where:
  lhs, varname ~ ident
  rhs, init_value ~ int_value

rule compound_stmt_inline:
  stmt; ... ; stmt;
where:
  stmt ~ simple_stmt_inline

example compound_stmt_inline:
  x = 3;
  var y = 9;
outputs: {
  stmt: [
    { lhs: "x", rhs: "3" },
    { varname: "y", init_value: "9" },
  ]
}

rule simple_stmt_tmpl choices:
| "var"     -> "var varname [ = init_value ]"
| int_value -> error 'Statement cannot start with a number'
| "lhs = rhs"
| error 'Invalid statement'
where:
  lhs, varname ~ ident
  rhs, init_value ~ int_value
outputs: {
  decl: { varname, init_value },
  asgn: { lhs, rhs },
}

rule compound_stmt_tmpl:
  stmt; ... ; stmt;
where:
  stmt ~ simple_stmt_tmpl

# TODO: Make it possible to omit {} using mapped patterns. E.g.
# If the pattern was defined using (asgn ~ "lhs = rhs"), we should omit it when
# matching other branches.
example compound_stmt_tmpl:
  x = 3;
  var y = 9;
outputs: {
  stmt: [
    { decl: {},
      asgn: { lhs: "x", rhs: "3" } },
    { decl: { varname: "y", init_value: "9" },
      asgn: {} },
  ]
}

# This rule is the same as simple_stmt_tmpl, but omits more of the output if
# fields are absent.
rule stmt_opt_more choices:
| "var"     -> (decl ~ "var varname [ = init_value ]")
| int_value -> error 'Statement cannot start with a number'
|              (asgn ~ "lhs = rhs")
| error 'Invalid statement'
where:
  lhs, varname ~ ident
  rhs, init_value ~ int_value
# This `outputs` stanza makes no difference to the json output, but
# affects the generated C++ files. The output types are JsonLike if this
# `outputs` stanza is absent. Otherwise, it's a generated struct.
outputs: { decl, asgn }

# Dev-note: Interesting use case for parameterized rules. It'd be convenient if
# we didn't have to define the various compound_* rules separately. But is that
# unique to testing parsers, or would oalex users also care about such a
# feature?
rule compound_opt_more:
  stmt; ... ; stmt;
where:
  stmt ~ stmt_opt_more

# Unlike the example for compound_stmt_tmpl, notice how the outputs here
# do not need empty `{}` fields for branches not taken. This is the result of
# defining the branches with mapped identifiers, instead of manually filling
# in subfields of each branch.
example compound_opt_more:
  x = 3;
  var y = 9;
outputs: {
  stmt: [
    { asgn: { lhs: "x", rhs: "3" } },
    { decl: { varname: "y", init_value: "9" } },
  ]
}
