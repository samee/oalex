rule hello_world:
  Hello world
outputs: {}

example hello_world:
  Hello world
outputs success

example hello_world:
  Hello
    world
outputs success

# TODO: custom errors even for these simple cases
rule ident: /[_a-zA-Z]+/
rule int_value: /-?[0-9]+/
rule binop: /[-+*\/]/

rule decl:
  var ident = rhs;
outputs: { ident, rhs }
where:
  rhs ~ int_value
  ident ~ ident


example decl:
  var x = 5;
outputs: { ident: "x", rhs: "5" }

example decl:
  var x = y;
outputs error with 'Does not match expected pattern'

rule global_vars:

  globals (
    var x = 5;  // This comment doesn't
    var y = 7;  //   mess up repeat-detection.
    ...
  )

where:
  "var...;" as decls ~ decl

example global_vars:

  globals (
    var a = 1;
    var b = 2;
  )

outputs: {
  decls: [
    { ident: "a", rhs: "1" },
    { ident: "b", rhs: "2" },
  ]
}


rule single_word:
  Word
outputs: { keyword: "word" }

example single_word:
  Word
outputs: { keyword: "word" }

rule single_non_terminal:
  int_value
outputs: { int_value, type: "literal-int" }

example single_non_terminal:
  42
outputs: { int_value: "42", type: "literal-int" }

# See if we can reuse local names,
# and can deduce sensible output templates.
rule simple_sum:
  lhs + rhs
where:
  lhs ~ ident
  rhs ~ ident

example simple_sum:
  a + b
outputs: { lhs: "a", rhs: "b" }

rule includes_simple_sum:
  (simple_sum)
outputs: { simple_sum }

example includes_simple_sum:
  (a + b)
outputs success

rule binop_expr:
  lhs + rhs
where:
  lhs, rhs ~ ident
  "+" as binop ~ binop

example binop_expr:
  a * b
outputs: { lhs: "a", rhs: "b", binop: "*" }

rule ignored_levels:
  var level: num
where:
  var ~ ident
  num ~ int_value
outputs: { leveled_var: var }  # A rule that doesn't use all its inputs.

example ignored_levels:
  msg level: 500
outputs: { leveled_var: "msg" }
