rule hello_world:
  Hello world
outputs: {}

example hello_world:
  Hello world
outputs success

example hello_world:
  Hello
    world
outputs success


ident := /[_a-zA-Z]+/
int_value := /-?[0-9]+/

rule decl:
  var ident = rhs;
outputs: { ident, rhs }
where:
  rhs ~ int_value


example decl:
  var x = 5;
outputs: { ident: "x", rhs: "5" }

example decl:
  var x = y;
outputs error with 'Expected int_value'

rule single_word:
  Word
outputs: { keyword: "word" }

example single_word:
  Word
outputs: { keyword: "word" }

rule single_non_terminal:
  int_value
outputs: { int_value, type: "literal-int" }

example single_non_terminal:
  42
outputs: { int_value: "42", type: "literal-int" }

# See if we can reuse local names,
# and can deduce sensible output templates.
rule simple_sum:
  lhs + rhs
where:
  lhs ~ ident
  rhs ~ ident

example simple_sum:
  a + b
outputs: { lhs: "a", rhs: "b" }
